# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 


CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )
DROP TABLE IF EXISTS Spotifydata;

SELECT* FROM Spotifydata;

-- Question: What is the average danceability by artist and track?
SELECT * FROM BIT_DB.SpotifydataSELECT AVG(danceability), artist_name, track_name
FROM Spotifydata
GROUP BY danceability;

-- Question: Who are the top 10 artists based on popularity?

SELECT artist_name, AVG(popularity) AS avg_popularity
FROM Spotifydata
GROUP by artist_name
ORDER BY avg_popularity
LIMIT 10;

-- Question: How many tracks are under the name artist: Olivia Rodrigo?

SELECT COUNT(track_name), artist_name
FROM Spotifydata
WHERE artist_name = 'Olivia Rodrigo'
GROUP BY artist_name;
-- We aggregate track_name using COUNT()
-- We get artist name, and those two columns are from Spotifydata table
-- WHERE we want the count for the speciifc artist name 'Olivia Rodrigo'
-- GROUP by artist_name

-- Question: Give me track names where popularity is at least 80 and tempo is at least 100. List the track names in alphabetical order
SELECT track_name, popularity, tempo
FROM Spotifydata
WHERE popularity >= 80
AND tempo >= 100
ORDER BY track_name ASC;

-- SELECT three columns: track_name, popularity, and tempo
-- FROM the Spotifydata table
-- WHERE we have two specific criteras using WHERE filter: popularity is at least 80 and tempo is at least 100
-- ORDER the track_names in ascending order


-- Question: Find the artist whose tracks have the highest average popularity across all their tracks. 
SELECT artist_name, AVG(popularity) AS avg_popularity
FROM Spotifydata
GROUP BY artist_name
ORDER BY avg_popularity DESC
LIMIT 1;
-- This would involve a subquery to first calculate the average popularity for each artist, 
-- and then selecting the artist with the highest value.
-- Tip: anything not used in aggregation is a part of GROUP BY; hence, artist_name

-- Question Question: Write a query to group tracks by their song_mode and find the 
-- average energy and danceability for tracks in both modes (0 and 1). 
-- This helps you analyze which mode tends to have higher energy or danceability.
-- Same as earlier

SELECT song_mode, AVG(energy) AS avg_energy, AVG(danceability) AS avg_danceabiltiy 
FROM Spotifydata
GROUP BY song_mode;

-- Question: Write a query to find the average duration of tracks grouped by their popularity range 
-- (e.g., group tracks into popularity ranges of 0-20, 21-40, etc.). 
-- Calculate the average duration for each range and order the results by the popularity range.

SELECT 
    CASE 
        WHEN popularity BETWEEN 0 AND 20 THEN '0-20'
        WHEN popularity BETWEEN 21 AND 40 THEN '21-40'
        WHEN popularity BETWEEN 41 AND 60 THEN '41-60'
        WHEN popularity BETWEEN 61 AND 80 THEN '61-80'
        WHEN popularity BETWEEN 81 AND 100 THEN '81-100'
    END AS popularity_range,
    AVG(duration_ms) AS avg_duration
FROM Spotifydata
GROUP BY popularity_range
ORDER BY popularity_range;

-- We use CASE to make categories by popularity ranges, and getting their averages. We END AS popularity_ range as an alias.
-- GROUP by popularity_range since that's our new alias name instead of popularity, thus it is not part of AVG()


-- Question: Find the average tempo for tracks with popularity greater than 85. Return just the average tempo. 

SELECT AVG(tempo) AS avg_tempo
FROM Spotifydata
WHERE popularity > 85;

-- We only want the average tempo returned so no GROUP BY is needed
-- Only focus on tracks with popularity greater than 85

-- Question: Count how many tracks have an even duration and how many have an odd duration. 
-- Return two columns: one for the count of even-duration tracks and one for odd-duration tracks. (
SELECT
    CASE
        WHEN duration_ms %2 = 0 THEN 'EVEN' -- Even duration
        WHEN duration_ms %2 != 0 THEN 'ODD' -- Odd duration 
    END AS duration_classification,
    COUNT(track_name) AS track_count
    FROM Spotifydata
    GROUP BY duration_classification; 

-- To count Odd and Even durations, we use CASE to classify them with CASE, naming it as duration_classification
-- %2 is modulus or modulo operator, and it returns the remainder of a division between two numbers.
-- divides the track's duration (in milliseconds) by 2 and checks the remainder
-- we COUNT(track_name) to count how many tracks are classified as Odd or Even duration, and GROUP BY duration_classification 



